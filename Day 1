1. 了解到了什么是机器学习，
知道了监督学习以及无监督学习的区别：
（1） 监督学习是我们给予机器样本以及标签，机器可以通过对训练集的学习（如果判断对则奖励，错则批评）  
      进而调整一系列参数得到最终的参数，用于来对测试集做预测，在测试集上判断训练的好坏程度。
（2） 无监督学习则是没有标签的学习，机器通过自己寻找样本之中的规律来判断每个样本之间的关系，并且在测试集
      上做预测。

NUMBER-1 单变量线性回归
模型利用线性函数表示：如Y=wX1+b来表示，w、b为需要学习的参数，拟合数据
代价函数为loss function：用于判断数据拟合的好坏程度
梯度下降gradient descent： 不断优化，使得loss达到全局最小。凸优化。


附上机器学习线性回归代码

import numpy as np
from sklearn.datasets import load_diabetes
from sklearn.utils import shuffle
import matplotlib.pyplot as plt


def linear_loss(X, y, w, b):
    num_train = X.shape[0]
    # num_feature = X.shape[1]
    # 构建模型
    y_hat = np.dot(X, w) + b
    # 定义损失函数
    loss = np.sum((y_hat - y)**2)/2*num_train
    # 两个偏导项
    dw = np.dot(X.T, (y_hat-y))/num_train
    db = np.sum(y_hat - y)/num_train

    return y_hat, loss, dw, db


def initialize_params(dims):
    w = np.zeros((dims, 1))
    b = 0
    return w, b


def linear_train(X, y, learning_rate, epoches):
    w, b = initialize_params(X.shape[1])
    loss_list = []
    for i in range(1, epoches):
        y_hat, loss, dw, db = linear_loss(X, y, w, b)
        loss_list.append(loss)
        # 更新参数w, b
        w += -learning_rate * dw
        b += -learning_rate * db
        if i % 1000 == 0:
            print("epoch %d loss %f" % (i, loss))
        params = {
            'w': w,
            'b': b
        }
        grads = {
            'dw': dw,
            'db': db
        }
    return loss_list, loss, params, grads


diabetes = load_diabetes()
data = diabetes.data
target = diabetes.target

# 打乱顺序
X, y = shuffle(data, target, random_state=13)
X = X.astype(np.float32)

# 训练集和测试集的划分
offset = int(X.shape[0] * 0.9)
X_train, y_train = X[:offset], y[:offset]
X_test, y_test = X[offset:], y[offset:]
y_train = y_train.reshape((-1, 1))
y_test = y_test.reshape((-1, 1))

print("X_train = ", X_train.shape)
print("X_test = ", X_test.shape)
print("y_train = ", y_train.shape)
print("y_test = ", y_test.shape)
print("xxx= ", X_train.shape[1])

loss_list2, loss2, params2, grads2 = linear_train(X_train, y_train, 0.001, 100000)
print(params2)


def predict(X, params2):
    w = params2['w']
    b = params2['b']

    y_pred = np.dot(X, w) + b
    return y_pred


y_pred = predict(X_test, params2)
print(y_pred[:5])

f = X_test.dot(params2['w']) + params2['b']
plt.scatter(range(X_test.shape[0]), y_test)
plt.plot(f, color = 'darkorange')
plt.xlabel('X')
plt.ylabel('y')
plt.show()
